package channel_duplicate

import "testing"

// TestParseTextURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏–π –≤ UTF-16.
func TestParseTextURL(t *testing.T) {
	base := "üòÄ–ü—Ä–∏–≤–µ—Ç" // emoji –∑–∞–Ω–∏–º–∞–µ—Ç –¥–≤–µ –ø–æ–∑–∏—Ü–∏–∏ UTF-16
	add := "[–ú–∏—Ä](https://example.com)"
	ent, clean := parseTextURL(add, utf16Len(base))
	if ent == nil {
		t.Fatalf("—Å—É—â–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
	}
	if ent.Offset != utf16Len(base) {
		t.Errorf("–æ–∂–∏–¥–∞–ª—Å—è offset %d, –ø–æ–ª—É—á–µ–Ω %d", utf16Len(base), ent.Offset)
	}
	if ent.Length != utf16Len("–ú–∏—Ä") {
		t.Errorf("–æ–∂–∏–¥–∞–ª–∞—Å—å –¥–ª–∏–Ω–∞ %d, –ø–æ–ª—É—á–µ–Ω–∞ %d", utf16Len("–ú–∏—Ä"), ent.Length)
	}
	if clean != "–ú–∏—Ä" {
		t.Errorf("–æ–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç '–ú–∏—Ä', –ø–æ–ª—É—á–µ–Ω–æ %q", clean)
	}
}
