package post

import (
	"context"
	"fmt"
	"math/rand"
	"strconv"
	"strings"
	"time"

	"atg_go/models"
	"atg_go/pkg/storage"
	module "atg_go/pkg/telegram/module"
	accountmutex "atg_go/pkg/telegram/module/account_mutex"

	"github.com/gotd/td/tg"
)

// reactions —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
var reactions = []string{"‚ù§Ô∏è", "üëç"}

// SendReaction –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ –ø–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ postURL.
// –§—É–Ω–∫—Ü–∏—è –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞.
func SendReaction(db *storage.DB, acc models.Account, postURL string) error {
	// –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	if err := accountmutex.LockAccount(acc.ID); err != nil {
		return err
	}
	defer accountmutex.UnlockAccount(acc.ID)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Telegram –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
	client, err := module.Modf_AccountInitialization(acc.ApiID, acc.ApiHash, acc.Phone, acc.Proxy, nil, db.Conn, acc.ID, nil)
	if err != nil {
		return err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	return client.Run(ctx, func(ctx context.Context) error {
		api := tg.NewClient(client)

		// –ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ https://t.me/name/id
		trimmed := strings.TrimPrefix(postURL, "https://t.me/")
		parts := strings.Split(trimmed, "/")
		if len(parts) != 2 {
			return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç")
		}
		username := parts[0]
		msgID, err := strconv.Atoi(parts[1])
		if err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ username
		resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{Username: username})
		if err != nil {
			return err
		}
		ch, err := module.Modf_FindChannel(resolved.GetChats())
		if err != nil {
			return err
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª; –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫
		_ = module.Modf_JoinChannel(ctx, api, ch, db, acc.ID)

		// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞
		allowed, err := module.GetAllowedReactions(ctx, api, ch, reactions)
		if err != nil {
			return err
		}
		if len(allowed) == 0 {
			return fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π")
		}

		// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë
		reaction := allowed[rand.Intn(len(allowed))]
		_, err = api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
			Peer:        &tg.InputPeerChannel{ChannelID: ch.ID, AccessHash: ch.AccessHash},
			MsgID:       msgID,
			Reaction:    []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: reaction}},
			AddToRecent: true,
		})
		return err
	})
}
