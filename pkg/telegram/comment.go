package telegram

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"time"

	module "atg_go/pkg/telegram/module"

	"github.com/gotd/td/tg"
)

// SendComment - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è:
// 1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram
// 2. –ù–∞—Ö–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
// 3. –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
// 4. –ù–∞—Ö–æ–¥–∏—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
// 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ
func SendComment(phone, channelURL string, apiID int, apiHash string, postsCount int) error {
	log.Printf("[START] Sending emoji to channel %s from %s", channelURL, phone)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "https://t.me/channel" –∏–∑–≤–ª–µ–∫–∞–µ–º "channel")
	username, err := module.Modf_ExtractUsername(channelURL)
	if err != nil {
		return fmt.Errorf("failed to extract username: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	client, err := module.Modf_AccountInitialization(apiID, apiHash, phone)
	if err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
	return client.Run(ctx, func(ctx context.Context) error {
		api := tg.NewClient(client) // –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç

		// // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∞–º–æ–º —Å–µ–±–µ ‚Äî –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç InputUserClass, –∞ –Ω–µ Request
		// meFull, err := api.UsersGetFullUser(ctx, &tg.InputUserSelf{})
		// if err != nil {
		// 	return fmt.Errorf("failed to fetch self userID: %w", err)
		// }
		// // –≤ –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–æ–ª–µ FullUser —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		// selfID := meFull.FullUser.ID

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ username
		resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
			Username: username,
		})
		if err != nil {
			return fmt.Errorf("failed to resolve channel: %w", err)
		}

		// –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
		channel, err := module.Modf_FindChannel(resolved.GetChats())
		if err != nil {
			return err
		}

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∞–º –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É—Å—Å–∏–∏
		if errJoinChannel := module.Modf_JoinChannel(ctx, api, channel); errJoinChannel != nil {
			log.Printf("[ERROR] Failed to join channel: ID=%d AccessHash=%d Err=%v",
				channel.ID, channel.AccessHash, errJoinChannel)
		}

		// 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É–ª –ø–æ—Å—Ç–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
		historyLimit := postsCount * 3
		if historyLimit < 10 {
			historyLimit = 10
		}
		posts, err := module.GetChannelPosts(ctx, api, channel, historyLimit)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞: %w", err)
		}

		// 2Ô∏è‚É£ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ postsCount
		rand.Shuffle(len(posts), func(i, j int) {
			posts[i], posts[j] = posts[j], posts[i]
		})

		var (
			discussionData *module.Discussion
			found          bool
		)

		//  –ü–µ—Ä–µ–º–µ—à–∞–ª–∏ –∏ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤
		for i, p := range posts {
			if i >= postsCount {
				break
			}
			discussionData, err = module.Modf_getPostDiscussion(ctx, api, channel, p.ID)
			if err != nil {
				// –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
				log.Printf("[DEBUG] post %d: discussion fetch failed (%v) ‚Äî skipping", p.ID, err)
				continue
			}
			log.Printf("[DEBUG] post %d has %d replies", p.ID, len(discussionData.Replies))

			// // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ—Ç –∂–µ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª (FromID == selfID)
			// skip := false
			// for _, r := range discussionData.Replies {
			// 	if peer, ok := r.FromID.(*tg.PeerUser); ok {
			// 		log.Printf("[DEBUG] reply from userID=%d", peer.UserID)
			// 		if peer.UserID == selfID {
			// 			log.Printf("[DEBUG] post %d already commented by selfID=%d", p.ID, selfID)
			// 			skip = true
			// 			break
			// 		}
			// 	}
			// }
			// if skip {
			// 	log.Printf("[DEBUG] skipping post %d", p.ID)
			// 	continue
			// }

			// –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è –ø–æ—Å—Ç
			log.Printf("[DEBUG] selected post %d for commenting (self-check disabled)", p.ID)
			found = true
			break
		}

		if !found {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ %d –ø—Ä–æ–≤–µ—Ä–æ–∫", postsCount)
		}

		// –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –∏–º–µ–Ω–Ω–æ –Ω–∞ PostMessage –∏–∑ Discussion
		replyToMsgID := discussionData.PostMessage.ID

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–≤ –Ω–µ–π –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –æ—Ç–≤–µ—Ç—ã)
		if errJoinDisc := module.Modf_JoinChannel(ctx, api, discussionData.Chat); errJoinDisc != nil {
			log.Printf("[ERROR] Failed to join discussion group: ID=%d Err=%v",
				discussionData.Chat.ID, errJoinDisc)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
		return sendEmojiReply(ctx, api, &tg.InputPeerChannel{
			ChannelID:  discussionData.Chat.ID,
			AccessHash: discussionData.Chat.AccessHash,
		}, replyToMsgID)

	})
}

var emojiList = []string{
	"ü§°", "ü•É", "üå∂", "‚úäüèø", "üëÉüèø", "ü¶∑", "üëú", "üëõ", "üëë", "üéö", "üè¥", "üá∞üáµ",
	"ü¶ß", "ü¶•", "ü¶Ñ", "ü¶¶", "üê∑", "üê¶",
	// –ö–∞—Å–∫–∞ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Ç—Ä–∏ —Ä–∞–∑–∞, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –µ–µ –≤—ã–±–æ—Ä–∞)
	"ü™ñ", "ü™ñ", "ü™ñ",
	"—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç) –¥–æ—Å–≤–∏–¥–∞–Ω—å—è",
	")", ")", ")",
}

// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ emojiList
func getRandomEmoji() string {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
	rand.Seed(time.Now().UnixNano())
	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	return emojiList[rand.Intn(len(emojiList))]
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func sendEmojiReply(ctx context.Context, api *tg.Client, peer *tg.InputPeerChannel, replyToMsgID int) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
	emoji := getRandomEmoji()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç (peer –∏ replyToMsgID —É–∂–µ –∑–∞–¥–∞–Ω—ã –≤—ã–∑—ã–≤–∞—é—â–∏–º)
	_, err := api.MessagesSendMessage(ctx, &tg.MessagesSendMessageRequest{
		Peer:     peer,
		Message:  emoji,
		ReplyTo:  &tg.InputReplyToMessage{ReplyToMsgID: replyToMsgID},
		RandomID: rand.Int63(),
	})

	if err != nil {
		return fmt.Errorf("failed to send emoji: %w", err) // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
	}

	log.Printf("Emoji %s sent successfully", emoji) // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
	return nil
}
