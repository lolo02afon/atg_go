package telegram

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"time"

	"atg_go/pkg/storage"
	module "atg_go/pkg/telegram/module"

	"github.com/gotd/td/tg"
)

// SendComment –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram, –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
// –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.
// –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ activity.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (int),
// ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (int) –∏ –æ—à–∏–±–∫—É.
// –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ –æ–±–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞–≤–Ω—ã 0.
func SendComment(db *storage.DB, accountID int, phone, channelURL string, apiID int, apiHash string, postsCount int, canSend func(channelID, messageID int) (bool, error), userIDs []int) (int, int, error) {
	log.Printf("[START] –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ –≤ –∫–∞–Ω–∞–ª %s –æ—Ç –∏–º–µ–Ω–∏ %s", channelURL, phone)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "https://t.me/channel" –∏–∑–≤–ª–µ–∫–∞–µ–º "channel")
	username, err := module.Modf_ExtractUsername(channelURL)
	if err != nil {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		return 0, 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	client, err := module.Modf_AccountInitialization(apiID, apiHash, phone)
	if err != nil {
		// –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
		return 0, 0, err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

	var (
		msgID     int
		channelID int
	)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
	err = client.Run(ctx, func(ctx context.Context) error {
		api := tg.NewClient(client) // –°–æ–∑–¥–∞–µ–º API-–∫–ª–∏–µ–Ω—Ç

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø–æ username
		resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
			Username: username,
		})
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–Ω–∞–ª: %w", err)
		}

		// –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª —Å—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
		channel, err := module.Modf_FindChannel(resolved.GetChats())
		if err != nil {
			return err
		}

		// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∞–º –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Å–∫—É—Å—Å–∏–∏
		if errJoinChannel := module.Modf_JoinChannel(ctx, api, channel); errJoinChannel != nil {
			log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: ID=%d AccessHash=%d –û—à–∏–±–∫–∞=%v",
				channel.ID, channel.AccessHash, errJoinChannel)
		}

		// 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ postsCount –ø–æ—Å—Ç–æ–≤
		// —á—Ç–æ–±—ã –Ω–µ —É—Ö–æ–¥–∏—Ç—å –≥–ª—É–±–æ–∫–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞
		if postsCount < 1 {
			postsCount = 1
		}
		posts, err := module.GetChannelPosts(ctx, api, channel, postsCount)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞: %w", err)
		}

		idSet := make(map[int]struct{}, len(userIDs))
		for _, id := range userIDs {
			idSet[id] = struct{}{}
		}

		for _, p := range posts {
			discussionData, err := module.Modf_getPostDiscussion(ctx, api, channel, p.ID)
			if err != nil {
				log.Printf("[DEBUG] –ø–æ—Å—Ç %d: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ (%v) ‚Äî –ø—Ä–æ–ø—É—Å–∫", p.ID, err)
				continue
			}

			// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–∏—Ç–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
			if errJoinDisc := module.Modf_JoinChannel(ctx, api, discussionData.Chat); errJoinDisc != nil {
				log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π: ID=%d –û—à–∏–±–∫–∞=%v", discussionData.Chat.ID, errJoinDisc)
			}

			replyToMsgID := discussionData.PostMessage.ID

			if canSend != nil {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
				allowed, err := canSend(int(channel.ID), replyToMsgID)
				if err != nil {
					return err
				}
				if !allowed {
					log.Printf("[INFO] –ü–æ—Å—Ç %d —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞—à–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è %s", replyToMsgID, phone)
					continue
				}
			}

			hasOwn, err := hasRecentCommentByUsers(ctx, api, discussionData.Chat, replyToMsgID, idSet)
			if err != nil {
				log.Printf("[DEBUG] –ø–æ—Å—Ç %d: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (%v) ‚Äî –ø—Ä–æ–ø—É—Å–∫", p.ID, err)
				continue
			}
			if hasOwn {
				log.Printf("[INFO] –ü–æ—Å—Ç %d —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞—à–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è %s", replyToMsgID, phone)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏-–æ—Ç–≤–µ—Ç
			if err := sendEmojiReply(ctx, api, &tg.InputPeerChannel{
				ChannelID:  discussionData.Chat.ID,
				AccessHash: discussionData.Chat.AccessHash,
			}, replyToMsgID); err != nil {
				return err
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
			msgID = replyToMsgID
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞, –ø—Ä–∏–≤–æ–¥—è –µ–≥–æ –∫ —Ç–∏–ø—É int
			channelID = int(channel.ID)
			// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É activity –ø–æ ID –ø–æ—Å—Ç–∞
			if err := module.SaveCommentActivity(db, accountID, channelID, msgID); err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %w", err)
			}

			return nil
		}

		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ—Å–ª–µ %d –ø—Ä–æ–≤–µ—Ä–æ–∫", postsCount)

	})

	return msgID, channelID, err
}

var emojiList = []string{
	"ü§°", "ü•É", "üå∂", "‚úäüèø", "üëÉüèø", "ü¶∑", "üëú", "üëõ", "üëë", "üéö", "üè¥", "üá∞üáµ",
	"ü¶ß", "ü¶•", "ü¶Ñ", "ü¶¶", "üê∑", "üê¶",
	// –ö–∞—Å–∫–∞ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Ç—Ä–∏ —Ä–∞–∑–∞, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –µ–µ –≤—ã–±–æ—Ä–∞)
	"ü™ñ", "ü™ñ", "ü™ñ",
	"—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å—Ç) –¥–æ—Å–≤–∏–¥–∞–Ω—å—è",
	")", ")", ")",
}

// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ emojiList
func getRandomEmoji() string {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
	rand.Seed(time.Now().UnixNano())
	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	return emojiList[rand.Intn(len(emojiList))]
}

// –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
// –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç nil
func sendEmojiReply(ctx context.Context, api *tg.Client, peer *tg.InputPeerChannel, replyToMsgID int) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
	emoji := getRandomEmoji()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç
	_, err := api.MessagesSendMessage(ctx, &tg.MessagesSendMessageRequest{
		Peer:     peer,
		Message:  emoji,
		ReplyTo:  &tg.InputReplyToMessage{ReplyToMsgID: replyToMsgID},
		RandomID: rand.Int63(),
	})
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏: %w", err)
	}

	log.Printf("–≠–º–æ–¥–∑–∏ %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", emoji)
	return nil
}

// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
func hasRecentCommentByUsers(ctx context.Context, api *tg.Client, chat *tg.Channel, msgID int, userIDs map[int]struct{}) (bool, error) {
	if len(userIDs) == 0 {
		return false, nil
	}

	res, err := api.MessagesGetReplies(ctx, &tg.MessagesGetRepliesRequest{
		Peer:  &tg.InputPeerChannel{ChannelID: chat.ID, AccessHash: chat.AccessHash},
		MsgID: msgID,
		Limit: 30,
	})
	if err != nil {
		return false, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: %w", err)
	}

	msgs, ok := res.(*tg.MessagesChannelMessages)
	if !ok {
		return false, fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞")
	}

	for _, m := range msgs.Messages {
		msg, ok := m.(*tg.Message)
		if !ok {
			continue
		}
		if from, ok := msg.FromID.(*tg.PeerUser); ok {
			if _, exist := userIDs[int(from.UserID)]; exist {
				return true, nil
			}
		}
	}

	return false, nil
}
