package telegram

import (
	"testing"

	"github.com/gotd/td/tg"
)

// TestSelectTargetMessage_NewestMessage –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–π.
func TestSelectTargetMessage_NewestMessage(t *testing.T) {
	msgs := []*tg.Message{{ID: 3}, {ID: 2}, {ID: 1}}
	msg, err := selectTargetMessage(msgs)
	if err != nil {
		t.Fatalf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
	if msg.ID != 3 {
		t.Fatalf("–æ–∂–∏–¥–∞–ª—Å—è ID 3, –ø–æ–ª—É—á–µ–Ω–æ %d", msg.ID)
	}
}

// TestSelectTargetMessage_Empty –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞.
func TestSelectTargetMessage_Empty(t *testing.T) {
	if _, err := selectTargetMessage([]*tg.Message{}); err == nil {
		t.Fatalf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç")
	}
}

// TestSelectTargetMessage_SkipReactions —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è.
func TestSelectTargetMessage_SkipReactions(t *testing.T) {
	msgs := []*tg.Message{
		{ID: 3, Reactions: tg.MessageReactions{Results: []tg.ReactionCount{{Reaction: &tg.ReactionEmoji{Emoticon: "‚ù§Ô∏è"}, Count: 1}}}},
		{ID: 2},
		{ID: 1},
	}
	msg, err := selectTargetMessage(msgs)
	if err != nil {
		t.Fatalf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
	if msg.ID != 2 {
		t.Fatalf("–æ–∂–∏–¥–∞–ª—Å—è ID 2, –ø–æ–ª—É—á–µ–Ω–æ %d", msg.ID)
	}
}

// TestSelectTargetMessage_AllWithReactions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —Å —Ä–µ–∞–∫—Ü–∏—è–º–∏.
func TestSelectTargetMessage_AllWithReactions(t *testing.T) {
	msgs := []*tg.Message{
		{ID: 2, Reactions: tg.MessageReactions{Results: []tg.ReactionCount{{Reaction: &tg.ReactionEmoji{Emoticon: "‚ù§Ô∏è"}, Count: 1}}}},
		{ID: 1, Reactions: tg.MessageReactions{Results: []tg.ReactionCount{{Reaction: &tg.ReactionEmoji{Emoticon: "üòÇ"}, Count: 1}}}},
	}
	if _, err := selectTargetMessage(msgs); err == nil {
		t.Fatalf("–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –µ—ë –Ω–µ—Ç")
	}
}

// TestPickReactionFallback –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è.
func TestPickReactionFallback(t *testing.T) {
	rnd.Seed(1)
	allowed := []string{"‚ù§Ô∏è"}
	base := []string{"üëç"}
	r := pickReaction(base, allowed)
	if r != "‚ù§Ô∏è" {
		t.Fatalf("–æ–∂–∏–¥–∞–ª–∞—Å—å —Ä–µ–∞–∫—Ü–∏—è ‚ù§Ô∏è, –ø–æ–ª—É—á–µ–Ω–æ %s", r)
	}
}

// TestPickReactionAllowed —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞.
func TestPickReactionAllowed(t *testing.T) {
	rnd.Seed(2)
	allowed := []string{"‚ù§Ô∏è", "üëç"}
	base := []string{"‚ù§Ô∏è", "üëç"}
	r := pickReaction(base, allowed)
	if r != "üëç" && r != "‚ù§Ô∏è" {
		t.Fatalf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è: %s", r)
	}
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ allowed.
	ok := false
	for _, a := range allowed {
		if r == a {
			ok = true
		}
	}
	if !ok {
		t.Fatalf("–≤—ã–±—Ä–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è, –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: %s", r)
	}
}
