package telegram

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"time"

	module "atg_go/pkg/telegram/module"

	"github.com/gotd/td/tg"
)

// SendReaction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ–±—Å—É–∂–¥–µ–Ω–∏—è
// –∫–∞–Ω–∞–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è.
func SendReaction(phone, channelURL string, apiID int, apiHash string, msgCount int) (int, error) {
	log.Printf("[START] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª %s –æ—Ç –∏–º–µ–Ω–∏ %s", channelURL, phone)

	username, err := module.Modf_ExtractUsername(channelURL)
	if err != nil {
		return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	client, err := module.Modf_AccountInitialization(apiID, apiHash, phone)
	if err != nil {
		return 0, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	var reactedMsgID int

	err = client.Run(ctx, func(ctx context.Context) error {
		api := tg.NewClient(client)

		resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{Username: username})
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–Ω–∞–ª: %w", err)
		}

		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º –∫–∞–Ω–∞–ª –ø–æ username
		channel, err := module.Modf_FindChannel(resolved.GetChats())
		if err != nil {
			return err
		}
		log.Printf("[DEBUG] –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª ID=%d", channel.ID)

		// –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é
		if errJoin := module.Modf_JoinChannel(ctx, api, channel); errJoin != nil {
			log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: ID=%d –û—à–∏–±–∫–∞=%v", channel.ID, errJoin)
		}

		// –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –Ω–µ –∑–∞–≤—è–∑–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
		discussionChat, err := module.Modf_getDiscussionChat(ctx, api, channel)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: %w", err)
		}
		log.Printf("[DEBUG] –ß–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è ID=%d", discussionChat.ID)

		if errJoin := module.Modf_JoinChannel(ctx, api, discussionChat); errJoin != nil {
			log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ID=%d –û—à–∏–±–∫–∞=%v", discussionChat.ID, errJoin)
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
		allowedReactions, err := module.GetAllowedReactions(ctx, api, discussionChat, reactionList)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: %w", err)
		}
		if len(allowedReactions) == 0 {
			return fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ —á–∞—Ç–µ")
		}
		log.Printf("[DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: %v", allowedReactions)

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
		messages, err := module.GetChannelPosts(ctx, api, discussionChat, msgCount)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: %w", err)
		}
		log.Printf("[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(messages))

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é
		targetMsg, err := selectTargetMessage(messages)
		if err != nil {
			return err
		}
		log.Printf("[DEBUG] –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID=%d", targetMsg.ID)

		// –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é: —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞,
		// –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é –∞–¥–º–∏–Ω–∞–º–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
		reaction := pickReaction(reactionList, allowedReactions)
		log.Printf("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é %s", reaction)

		send := func(r string) error {
			_, err = api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
				Peer:        &tg.InputPeerChannel{ChannelID: discussionChat.ID, AccessHash: discussionChat.AccessHash},
				MsgID:       targetMsg.ID,
				Reaction:    []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: r}},
				AddToRecent: true,
			})
			return err
		}

		if errSend := send(reaction); errSend != nil {
			if tg.IsReactionInvalid(errSend) && reaction != allowedReactions[0] {
				log.Printf("[WARN] –†–µ–∞–∫—Ü–∏—è %s –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞: %v", reaction, errSend)
				reaction = allowedReactions[0]
				log.Printf("[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é %s", reaction)
				if errSend = send(reaction); errSend != nil {
					return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: %w", errSend)
				}
			} else {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: %w", errSend)
			}
		}

		reactedMsgID = targetMsg.ID
		log.Printf("–†–µ–∞–∫—Ü–∏—è %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", reaction)
		return nil
	})

	return reactedMsgID, err
}

var reactionList = []string{"‚ù§Ô∏è", "üëç"}

var rnd = rand.New(rand.NewSource(time.Now().UnixNano()))

// getRandomReaction –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
func getRandomReaction(reactions []string) string {
	return reactions[rnd.Intn(len(reactions))]
}

// pickReaction –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–∑ base, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.
// –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∏–∑ allowed.
func pickReaction(base, allowed []string) string {
	r := getRandomReaction(base)
	for _, a := range allowed {
		if r == a {
			return r
		}
	}
	return allowed[0]
}

// selectTargetMessage –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–π.
// MessagesGetHistory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º,
// –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∏ –∏—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
// —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–∫—Ü–∏–∏. –ï—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ
// —Å–æ–¥–µ—Ä–∂–∞—Ç —Ä–µ–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É.
func selectTargetMessage(messages []*tg.Message) (*tg.Message, error) {
	if len(messages) == 0 {
		return nil, fmt.Errorf("–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏")
	}
	for _, m := range messages {
		if len(m.Reactions.Results) == 0 {
			return m, nil
		}
	}
	return nil, fmt.Errorf("–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
}
