package telegram

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"time"

	module "atg_go/pkg/telegram/module"

	"github.com/gotd/td/tg"
)

// SendReaction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ–±—Å—É–∂–¥–µ–Ω–∏—è
// –∫–∞–Ω–∞–ª–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–∫—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É
// –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è.
func SendReaction(phone, channelURL string, apiID int, apiHash string, msgCount int, userIDs []int) (int, error) {
	log.Printf("[START] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª %s –æ—Ç –∏–º–µ–Ω–∏ %s", channelURL, phone)

	username, err := module.Modf_ExtractUsername(channelURL)
	if err != nil {
		return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %w", err)
	}

	client, err := module.Modf_AccountInitialization(apiID, apiHash, phone)
	if err != nil {
		return 0, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	var reactedMsgID int

	err = client.Run(ctx, func(ctx context.Context) error {
		api := tg.NewClient(client)

		resolved, err := api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{Username: username})
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–Ω–∞–ª: %w", err)
		}

		channel, err := module.Modf_FindChannel(resolved.GetChats())
		if err != nil {
			return err
		}

		if errJoin := module.Modf_JoinChannel(ctx, api, channel); errJoin != nil {
			log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª: ID=%d –û—à–∏–±–∫–∞=%v", channel.ID, errJoin)
		}

		posts, err := module.GetChannelPosts(ctx, api, channel, 1)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞: %w", err)
		}

		discussion, err := module.Modf_getPostDiscussion(ctx, api, channel, posts[0].ID)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏–µ: %w", err)
		}

		if errJoin := module.Modf_JoinChannel(ctx, api, discussion.Chat); errJoin != nil {
			log.Printf("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ID=%d –û—à–∏–±–∫–∞=%v", discussion.Chat.ID, errJoin)
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π
		allowedReactions, err := module.GetAllowedReactions(ctx, api, discussion.Chat, reactionList)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: %w", err)
		}
		if len(allowedReactions) == 0 {
			return fmt.Errorf("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –≤ —á–∞—Ç–µ")
		}

		// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–æ—Å—Ç–∞
		messages, err := module.GetDiscussionReplies(ctx, api, discussion.Chat, discussion.PostMessage.ID, msgCount)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è: %w", err)
		}

		idSet := make(map[int]struct{}, len(userIDs))
		for _, id := range userIDs {
			idSet[id] = struct{}{}
		}

		var lastUserMsg *tg.Message

		// –ò–¥—ë–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–º
		for i := len(messages) - 1; i >= 0; i-- {
			msg := messages[i]
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∞-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
			from, ok := msg.FromID.(*tg.PeerUser)
			if !ok {
				continue
			}
			// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
			if _, exists := idSet[int(from.UserID)]; exists {
				continue
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è fallback
			if lastUserMsg == nil {
				lastUserMsg = msg
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é, –µ—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Ä–µ–∞–∫—Ü–∏–π
			if len(msg.Reactions.Results) == 0 {
				reaction := getRandomReaction(allowedReactions)
				_, err := api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
					Peer:        &tg.InputPeerChannel{ChannelID: discussion.Chat.ID, AccessHash: discussion.Chat.AccessHash},
					MsgID:       msg.ID,
					Reaction:    []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: reaction}},
					AddToRecent: true,
				})
				if err != nil {
					return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: %w", err)
				}
				reactedMsgID = msg.ID
				log.Printf("–†–µ–∞–∫—Ü–∏—è %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", reaction)
				return nil
			}
		}

		// –ï—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç —Ä–µ–∞–∫—Ü–∏–∏, —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ
		if lastUserMsg != nil {
			reaction := getRandomReaction(allowedReactions)
			_, err := api.MessagesSendReaction(ctx, &tg.MessagesSendReactionRequest{
				Peer:        &tg.InputPeerChannel{ChannelID: discussion.Chat.ID, AccessHash: discussion.Chat.AccessHash},
				MsgID:       lastUserMsg.ID,
				Reaction:    []tg.ReactionClass{&tg.ReactionEmoji{Emoticon: reaction}},
				AddToRecent: true,
			})
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é: %w", err)
			}
			reactedMsgID = lastUserMsg.ID
			log.Printf("–†–µ–∞–∫—Ü–∏—è %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", reaction)
			return nil
		}

		log.Printf("[INFO] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏")
		return nil
	})

	return reactedMsgID, err
}

var reactionList = []string{"‚ù§Ô∏è", "üòÇ"}

// getRandomReaction –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
func getRandomReaction(reactions []string) string {
	rand.Seed(time.Now().UnixNano())
	return reactions[rand.Intn(len(reactions))]
}
