package module

import (
	"context"
	"fmt"

	"github.com/gotd/td/tg"
)

// defaultReactions —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
// —Ä–µ–∞–∫—Ü–∏–∏ –∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
var defaultReactions = []string{"üëç", "‚ù§Ô∏è", "üî•", "üòÅ"}

// GetChannelReactions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π, —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–º.
// –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ limit —Ä–µ–∞–∫—Ü–∏–π –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª.
// –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞.
func GetChannelReactions(ctx context.Context, api *tg.Client, channel *tg.Channel, limit int) ([]string, error) {
	full, err := api.ChannelsGetFullChannel(ctx, &tg.InputChannel{ChannelID: channel.ID, AccessHash: channel.AccessHash})
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞: %w", err)
	}

	fullChat, ok := full.GetFullChat().(*tg.ChannelFull)
	if !ok {
		return nil, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ")
	}

	reactions, ok := fullChat.GetAvailableReactions()
	if !ok || reactions == nil {
		// –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if len(defaultReactions) < limit {
			return defaultReactions, nil
		}
		return defaultReactions[:limit], nil
	}

	switch r := reactions.(type) {
	case *tg.ChatReactionsAll:
		// –ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if len(defaultReactions) < limit {
			return defaultReactions, nil
		}
		return defaultReactions[:limit], nil
	case *tg.ChatReactionsNone:
		return nil, fmt.Errorf("–≤ –∫–∞–Ω–∞–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏")
	case *tg.ChatReactionsSome:
		var result []string
		for _, rc := range r.Reactions {
			if len(result) >= limit {
				break
			}
			if emoji, ok := rc.(*tg.ReactionEmoji); ok {
				result = append(result, emoji.Emoticon)
			}
		}
		return result, nil
	default:
		return nil, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–ø–∏—Å–∫–∞ —Ä–µ–∞–∫—Ü–∏–π")
	}
}
